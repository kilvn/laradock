---
apiVersion: v1
kind: Service
metadata:
  annotations:
    kompose.cmd: kompose convert -o k8s.yaml
    kompose.version: 1.28.0 (HEAD)
  creationTimestamp: null
  labels:
    io.kompose.service: mariadb
  name: mariadb
spec:
  ports:
    - name: "3306"
      port: 3306
      targetPort: 3306
  selector:
    io.kompose.service: mariadb
status:
  loadBalancer: {}

---
apiVersion: v1
kind: Service
metadata:
  annotations:
    kompose.cmd: kompose convert -o k8s.yaml
    kompose.version: 1.28.0 (HEAD)
  creationTimestamp: null
  labels:
    io.kompose.service: nginx
  name: nginx
spec:
  ports:
    - name: "80"
      port: 80
      targetPort: 80
    - name: "443"
      port: 443
      targetPort: 443
  selector:
    io.kompose.service: nginx
status:
  loadBalancer: {}

---
apiVersion: v1
kind: Service
metadata:
  annotations:
    kompose.cmd: kompose convert -o k8s.yaml
    kompose.version: 1.28.0 (HEAD)
  creationTimestamp: null
  labels:
    io.kompose.service: php-fpm
  name: php-fpm
spec:
  ports:
    - name: "9003"
      port: 9003
      targetPort: 9003
    - name: "9000"
      port: 9000
      targetPort: 9000
  selector:
    io.kompose.service: php-fpm
status:
  loadBalancer: {}

---
apiVersion: v1
kind: Service
metadata:
  annotations:
    kompose.cmd: kompose convert -o k8s.yaml
    kompose.version: 1.28.0 (HEAD)
  creationTimestamp: null
  labels:
    io.kompose.service: redis
  name: redis
spec:
  ports:
    - name: "6379"
      port: 6379
      targetPort: 6379
  selector:
    io.kompose.service: redis
status:
  loadBalancer: {}

---
apiVersion: v1
kind: Service
metadata:
  annotations:
    kompose.cmd: kompose convert -o k8s.yaml
    kompose.version: 1.28.0 (HEAD)
  creationTimestamp: null
  labels:
    io.kompose.service: workspace
  name: workspace
spec:
  ports:
    - name: "2222"
      port: 2222
      targetPort: 22
    - name: "3000"
      port: 3000
      targetPort: 3000
    - name: "3001"
      port: 3001
      targetPort: 3001
    - name: "8080"
      port: 8080
      targetPort: 8080
    - name: "8001"
      port: 8001
      targetPort: 8000
    - name: "4200"
      port: 4200
      targetPort: 4200
    - name: "5173"
      port: 5173
      targetPort: 5173
  selector:
    io.kompose.service: workspace
status:
  loadBalancer: {}

---
apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    kompose.cmd: kompose convert -o k8s.yaml
    kompose.version: 1.28.0 (HEAD)
  creationTimestamp: null
  labels:
    io.kompose.service: mariadb
  name: mariadb
spec:
  replicas: 1
  selector:
    matchLabels:
      io.kompose.service: mariadb
  strategy:
    type: Recreate
  template:
    metadata:
      annotations:
        kompose.cmd: kompose convert -o k8s.yaml
        kompose.version: 1.28.0 (HEAD)
      creationTimestamp: null
      labels:
        io.kompose.network/laradock-backend: "true"
        io.kompose.service: mariadb
    spec:
      containers:
        - env:
            - name: MYSQL_DATABASE
              value: default
            - name: MYSQL_PASSWORD
              value: root
            - name: MYSQL_ROOT_PASSWORD
              value: root
            - name: MYSQL_USER
              value: root
            - name: TZ
              value: PRC
          image: mariadb:latest
          name: mariadb
          ports:
            - containerPort: 3306
          resources: {}
          volumeMounts:
            - mountPath: /var/lib/mysql
              name: mariadb-claim0
            - mountPath: /docker-entrypoint-initdb.d
              name: mariadb-claim1
      restartPolicy: Always
      volumes:
        - name: mariadb-claim0
          persistentVolumeClaim:
            claimName: mariadb-claim0
        - name: mariadb-claim1
          persistentVolumeClaim:
            claimName: mariadb-claim1
status: {}

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  creationTimestamp: null
  labels:
    io.kompose.service: mariadb-claim0
  name: mariadb-claim0
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 100Mi
status: {}

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  creationTimestamp: null
  labels:
    io.kompose.service: mariadb-claim1
  name: mariadb-claim1
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 100Mi
status: {}

---
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  creationTimestamp: null
  name: laradock-backend
spec:
  ingress:
    - from:
        - podSelector:
            matchLabels:
              io.kompose.network/laradock-backend: "true"
  podSelector:
    matchLabels:
      io.kompose.network/laradock-backend: "true"

---
apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    kompose.cmd: kompose convert -o k8s.yaml
    kompose.version: 1.28.0 (HEAD)
  creationTimestamp: null
  labels:
    io.kompose.service: nginx
  name: nginx
spec:
  replicas: 1
  selector:
    matchLabels:
      io.kompose.service: nginx
  strategy:
    type: Recreate
  template:
    metadata:
      annotations:
        kompose.cmd: kompose convert -o k8s.yaml
        kompose.version: 1.28.0 (HEAD)
      creationTimestamp: null
      labels:
        io.kompose.network/laradock-backend: "true"
        io.kompose.network/laradock-frontend: "true"
        io.kompose.service: nginx
    spec:
      containers:
        - env:
            - name: TZ
              value: PRC
          image: nginx:alpine
          name: nginx
          ports:
            - containerPort: 80
            - containerPort: 443
          resources: {}
          volumeMounts:
            - mountPath: /var/www
              name: nginx-claim0
            - mountPath: /var/log/nginx
              name: nginx-claim1
            - mountPath: /etc/nginx/sites-available
              name: nginx-claim2
            - mountPath: /etc/nginx/stream
              name: nginx-claim3
            - mountPath: /etc/nginx/ssl
              name: nginx-claim4
      restartPolicy: Always
      volumes:
        - name: nginx-claim0
          persistentVolumeClaim:
            claimName: nginx-claim0
        - name: nginx-claim1
          persistentVolumeClaim:
            claimName: nginx-claim1
        - name: nginx-claim2
          persistentVolumeClaim:
            claimName: nginx-claim2
        - name: nginx-claim3
          persistentVolumeClaim:
            claimName: nginx-claim3
        - name: nginx-claim4
          persistentVolumeClaim:
            claimName: nginx-claim4
status: {}

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  creationTimestamp: null
  labels:
    io.kompose.service: nginx-claim0
  name: nginx-claim0
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 100Mi
status: {}

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  creationTimestamp: null
  labels:
    io.kompose.service: nginx-claim1
  name: nginx-claim1
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 100Mi
status: {}

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  creationTimestamp: null
  labels:
    io.kompose.service: nginx-claim2
  name: nginx-claim2
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 100Mi
status: {}

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  creationTimestamp: null
  labels:
    io.kompose.service: nginx-claim3
  name: nginx-claim3
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 100Mi
status: {}

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  creationTimestamp: null
  labels:
    io.kompose.service: nginx-claim4
  name: nginx-claim4
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 100Mi
status: {}

---
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  creationTimestamp: null
  name: laradock-frontend
spec:
  ingress:
    - from:
        - podSelector:
            matchLabels:
              io.kompose.network/laradock-frontend: "true"
  podSelector:
    matchLabels:
      io.kompose.network/laradock-frontend: "true"

---
apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    kompose.cmd: kompose convert -o k8s.yaml
    kompose.version: 1.28.0 (HEAD)
  creationTimestamp: null
  labels:
    io.kompose.service: php-fpm
  name: php-fpm
spec:
  replicas: 1
  selector:
    matchLabels:
      io.kompose.service: php-fpm
  strategy:
    type: Recreate
  template:
    metadata:
      annotations:
        kompose.cmd: kompose convert -o k8s.yaml
        kompose.version: 1.28.0 (HEAD)
      creationTimestamp: null
      labels:
        io.kompose.network/laradock-backend: "true"
        io.kompose.service: php-fpm
    spec:
      containers:
        - env:
            - name: DOCKER_CERT_PATH
              value: /certs/client
            - name: DOCKER_HOST
              value: tcp://docker-in-docker:2376
            - name: DOCKER_TLS_CERTDIR
              value: /certs
            - name: DOCKER_TLS_VERIFY
              value: "1"
            - name: FAKETIME
              value: "-0"
            - name: PHP_IDE_CONFIG
              value: serverName=laradock
            - name: TZ
              value: PRC
          image: laradock/php-fpm:latest-8.2
          name: php-fpm
          ports:
            - containerPort: 9003
            - containerPort: 9000
          resources: {}
          volumeMounts:
            - mountPath: /usr/local/etc/php/php.ini
              name: php-fpm-claim0
            - mountPath: /var/www
              name: php-fpm-claim1
            - mountPath: /certs/client
              name: docker-in-docker
            - mountPath: /usr/local/etc/php-fpm.d/www.conf
              name: php-fpm-claim3
      restartPolicy: Always
      volumes:
        - name: php-fpm-claim0
          persistentVolumeClaim:
            claimName: php-fpm-claim0
        - name: php-fpm-claim1
          persistentVolumeClaim:
            claimName: php-fpm-claim1
        - name: docker-in-docker
          persistentVolumeClaim:
            claimName: docker-in-docker
        - name: php-fpm-claim3
          persistentVolumeClaim:
            claimName: php-fpm-claim3
status: {}

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  creationTimestamp: null
  labels:
    io.kompose.service: php-fpm-claim0
  name: php-fpm-claim0
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 100Mi
status: {}

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  creationTimestamp: null
  labels:
    io.kompose.service: php-fpm-claim1
  name: php-fpm-claim1
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 100Mi
status: {}

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  creationTimestamp: null
  labels:
    io.kompose.service: docker-in-docker
  name: docker-in-docker
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 100Mi
status: {}

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  creationTimestamp: null
  labels:
    io.kompose.service: php-fpm-claim3
  name: php-fpm-claim3
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 100Mi
status: {}

---
apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    kompose.cmd: kompose convert -o k8s.yaml
    kompose.version: 1.28.0 (HEAD)
  creationTimestamp: null
  labels:
    io.kompose.service: redis
  name: redis
spec:
  replicas: 1
  selector:
    matchLabels:
      io.kompose.service: redis
  strategy:
    type: Recreate
  template:
    metadata:
      annotations:
        kompose.cmd: kompose convert -o k8s.yaml
        kompose.version: 1.28.0 (HEAD)
      creationTimestamp: null
      labels:
        io.kompose.network/laradock-backend: "true"
        io.kompose.service: redis
    spec:
      containers:
        - image: redis:latest
          name: redis
          ports:
            - containerPort: 6379
          resources: {}
          volumeMounts:
            - mountPath: /data
              name: redis-claim0
      restartPolicy: Always
      volumes:
        - name: redis-claim0
          persistentVolumeClaim:
            claimName: redis-claim0
status: {}

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  creationTimestamp: null
  labels:
    io.kompose.service: redis-claim0
  name: redis-claim0
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 100Mi
status: {}

---
apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    kompose.cmd: kompose convert -o k8s.yaml
    kompose.version: 1.28.0 (HEAD)
  creationTimestamp: null
  labels:
    io.kompose.service: workspace
  name: workspace
spec:
  replicas: 1
  selector:
    matchLabels:
      io.kompose.service: workspace
  strategy:
    type: Recreate
  template:
    metadata:
      annotations:
        kompose.cmd: kompose convert -o k8s.yaml
        kompose.version: 1.28.0 (HEAD)
      creationTimestamp: null
      labels:
        io.kompose.network/laradock-backend: "true"
        io.kompose.network/laradock-frontend: "true"
        io.kompose.service: workspace
    spec:
      containers:
        - env:
            - name: CHOKIDAR_USEPOLLING
              value: "true"
            - name: DOCKER_CERT_PATH
              value: /certs/client
            - name: DOCKER_HOST
              value: tcp://docker-in-docker:2376
            - name: DOCKER_TLS_CERTDIR
              value: /certs
            - name: DOCKER_TLS_VERIFY
              value: "1"
            - name: PHP_IDE_CONFIG
              value: serverName=laradock
          image: laradock/workspace:latest-8.2
          name: workspace
          ports:
            - containerPort: 22
            - containerPort: 3000
            - containerPort: 3001
            - containerPort: 8080
            - containerPort: 8000
            - containerPort: 4200
            - containerPort: 5173
          resources: {}
          tty: true
          volumeMounts:
            - mountPath: /var/www
              name: workspace-claim0
            - mountPath: /certs/client
              name: docker-in-docker
            - mountPath: /etc/supervisord.d
              name: workspace-claim2
      restartPolicy: Always
      volumes:
        - name: workspace-claim0
          persistentVolumeClaim:
            claimName: workspace-claim0
        - name: docker-in-docker
          persistentVolumeClaim:
            claimName: docker-in-docker
        - name: workspace-claim2
          persistentVolumeClaim:
            claimName: workspace-claim2
status: {}

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  creationTimestamp: null
  labels:
    io.kompose.service: workspace-claim0
  name: workspace-claim0
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 100Mi
status: {}

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  creationTimestamp: null
  labels:
    io.kompose.service: workspace-claim2
  name: workspace-claim2
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 100Mi
status: {}

